##I BEGIN INCLUDING DATES ON JUNE 14th (LINE 48)

App pulls weather info for current location and displays it using semantic-ui Cards.

##bug
Semantic-ui-react causes webpack to fail compiling:
- tried a recently released patch for this issue + postinstall script. Did not work.
- identical issue has been found due to an extra semi-colon in semantic-ui-react/semantic.min.css. Removed semi-colon,
     did not fix issue.
##fixed
- re-installed semantic-ui, removed the semi-colons (one also in semantic-ui-react/semantic.css), and added the patch
    + postinstall script.
##takeaway
- semantic-ui-react seems under-maintained. For my next project, I will try a different css framework.


First display setup in weather.js was done using a generic Card. I removed that default card and replaced it with more
    more standard html/css. Used a tutorial to guide the layout and colour scheme for the app.

Added a reload button to the app. As of now, it only displays current weather.
In the free tier of openweathermap.org, a 3-day forecast is also available, so I will add that feature next.

After some messing around with having to exclude Bad Requests, I've created a promiseAll that performs both fetches on 
load. Parsing the passed array is relatively simple; the next steps will be:
- create a card below the current weather card to display the forecast
- set up moment-timezone to automatically adjust from GMT
- once able to display the information, then I will make determinations about exactly how extensive I can manage the
    forecast to be. openweathermap offers three hour forecasts for 5 days ahead, but I will likely not incorporate
    all of that into the app.

Have gotten to where I'm pulling and displaying all the data that I will want to. Spent some time exploring React hooks,
and some ways to convert the raw data into something more digestible (e.g. converting wind degrees into compass direction).
Next up, I want to make the forecast code more concise and programmatic; and I have to decide on a way to display it
that is easy to understand and intuitive to use.

I've decided to set up a function that runs on load and creates a table of the 5-day forecast. A table proved to be
a little too restrictive, so I will instead have it create descending paragraphs of the same dimensions.

New forecastDiv in useForecast generating, but only filling in the last flex div with data (from weatherData[1].list[36]).
For loop runs correctly, but it appends empty divs up up until the final loop. 
##Error fixed; I needed to call a new instance
of each element during each iteration.

Next step is to learn how to properly apply ReactDOM.render() to display the forecast data in the foredisplay div of
index.html.


##JUNE 14th (Dates to be included from here on out)
Checked some recommended tasks related to weatherapps, and one which I have not implemented is to have a selector that
allows the user to check the weather for a specific day of the week. The free tier of openweather.org only goes four 
days ahead, so I will have to take that into consideration. It doesn't supply me with an exact daily forecast, so
I'll design a function that takes the first reading after noon on a particular day and returns that.

First thing today though, after setting the basis for the above feature will be to figure out how to best get
the useForecast hook to render in HTML.

Did a simple tutorial at https://reactjs.org/tutorial/tutorial.html to see what fundamental mistakes I
was making.
- return statement frequently needs to be opened into multiple lines w/ parentheses, or Javascript wants to add a
    semi-colon and break it.
- using React.createElement in useForecast should be a better approach to my previous attempts.

Five-day forecast renders dynamically, but with parsing errors. Progress!
Parsing errors fixed. 
Before trying my idea from this morning, I'm going to work on the design.
- make date/time section more concise
- use weather icons in place of condition descriptor
- align columns uniformly

##JUNE 15th
After looking at the widgets offered in openweathermap's free tier, I've decided to add on to incorporate one into the
app. I've installed React router, and am going to have it display a different page based on what type of forecast
the user would like to see.

Followed through React router tutorial at https://www.codingame.com/playgrounds/6517/react-router-tutoria, except using
functional components.

After setting up my router and connecting my components, I ran into the error that I was trying to return a function as
a component. Changing " element={COMPONENT NAME} " to " element={<COMPONENT NAME/>} " turned out to be all that was
required for App.js to recognize it as a component.

Received work computer today. Set it up and downloaded all necessary programs before pulling this code.
##bug
npm install and npm audit return 6 high severity vulnerabilities all linked to react-scripts. Proof of
    this being that moving react-scripts to "devDependencies" and running 'npm audit --production' returns
    0 vulnerabilities.
- uninstalling/installing react-scripts doesn't solve the problem.
- npm audit fix --force would create a breaking change (by installing a much older version of react-scripts)
- The issue is the same as documented here: https://github.com/facebook/create-react-app/issues/11174
    It appears that this isn't actually an issue that needs fixing, but is a byproduct of 'npm audit'
    interacting with create-react-app.

##JUNE 16th
Routers are set up now, but they are not passing data to the Components. This is where I'll start today.
I've found this example which I will work from: https://github.com/taxigy/til/blob/master/redux/react-router-action-on-enter.md

weatherData now gets passed correctly to the current weather Component as an object, 
then parsed and displayed as desired. Next step is to set up the twice a day forecast to do the same,
and then add the weekly widget from openweathermap as another route.

useWidget hook isn't putting together the scripts correctly. console.logs show that it starts at the 
input level, so I've commented out most of the hook and am working to get a basic starting point.
##solved
I had left a snippet of the copied URL uncommented at the bottom of useWidget, causing it to run
    prematurely.

Wasn't able to get a script to dynamically render in the html. So for the time being, it is set so
that the div it appears in gets toggled as display none or inline, depending on the timing. This
is temporary.

##JUNE 17th
I've decided to start today by fixing up the CSS for the app some. Aligning the data in the forecast
route, and making the entire page more visually appealing will be first on the agenda.

Realized during testing that my workaround the widget isn't effective. It still needs to be passed the
city variable; once forecastDiv is aligned, that will be my next stop.

Spent quite a bit of time trying different ways of being able to edit the variables in myWidgetParams,
and get it to render. Going to to have to come back to it for another attempt later. Most likely way to 
get it to work may be to use an onClick with the test(*eventually "weekly") button, and have the scripts
load when they get generated. For the time being, the test route displays the weekly forecast for London,
England.

Have decided to set up a background which changes based on the current weather at the user's location.

##JUNE 20th
First thing to do today is to get the background image of the app to change depending on the current
weather for the user. The issue that I ran into before was that when I removed all the blank spaces from
openweathermap's description, it returned a string, and not a variable that I could search the images
object for.
- After trying a couple fixes, it turns out that searching the object via data[x] instead of data.x
    was all that was required.

Over the weekend, I found that openweathermap has another free tier call (onecall), which I had been
previously unaware of. So instead of continuing to try to get the widget to work, my next step will be to
use that call and extract the weekly forecast myself; then display it in the same method as my previous
two weather components.

Weekly forecast component is set up and working now. My next two tasks are:
- change the hourly forecast to match it's name, as opposed to 12-hour intervals. (Use onecall)
- put work into making the app look more visually appealing and easier to consume.

##JUNE 21st
Yesterday, I changed the hourly forecast to display in 3-hour intervals over the course of
24 hours, and will leave it at that.

This morning, I will start trying to make the app more visually appealing.

Spent some time getting the background to render properly, and straightening the weather displays in
24-hour and weekly forecast.

Looked into option for a city search component, which would allow user to input any city in the world
and get returned weather information. There is an API call which takes the city name as an input, so
that will be the basis for that component.

Have started with a display div that is very similar to the currentWeather display on the home page.
First setup is with a search box and submit button, then on click, the weather div should be displayed.

##June 22nd

With submit section set up in city search component, the next step will be to re-direct that to a div
built the same as the current weather div on the homepage.

Spent quite a bit of time learning about the proper way to use hooks. My implementation of searching for
a city will not work, because I am trying to call the hook from an onClick event. I've decided to
alter it so that instead, the onClick loads another component and passes the information from the cityName
box.
##I BEGIN INCLUDING DATES ON JUNE 14th (LINE 48)

App pulls weather info for current location and displays it using semantic-ui Cards.

##bug
Semantic-ui-react causes webpack to fail compiling:
- tried a recently released patch for this issue + postinstall script. Did not work.
- identical issue has been found due to an extra semi-colon in semantic-ui-react/semantic.min.css. Removed semi-colon,
     did not fix issue.
##fixed
- re-installed semantic-ui, removed the semi-colons (one also in semantic-ui-react/semantic.css), and added the patch
    + postinstall script.
##takeaway
- semantic-ui-react seems under-maintained. For my next project, I will try a different css framework.


First display setup in weather.js was done using a generic Card. I removed that default card and replaced it with more
    more standard html/css. Used a tutorial to guide the layout and colour scheme for the app.

Added a reload button to the app. As of now, it only displays current weather.
In the free tier of openweathermap.org, a 3-day forecast is also available, so I will add that feature next.

After some messing around with having to exclude Bad Requests, I've created a promiseAll that performs both fetches on 
load. Parsing the passed array is relatively simple; the next steps will be:
- create a card below the current weather card to display the forecast
- set up moment-timezone to automatically adjust from GMT
- once able to display the information, then I will make determinations about exactly how extensive I can manage the
    forecast to be. openweathermap offers three hour forecasts for 5 days ahead, but I will likely not incorporate
    all of that into the app.

Have gotten to where I'm pulling and displaying all the data that I will want to. Spent some time exploring React hooks,
and some ways to convert the raw data into something more digestible (e.g. converting wind degrees into compass direction).
Next up, I want to make the forecast code more concise and programmatic; and I have to decide on a way to display it
that is easy to understand and intuitive to use.

I've decided to set up a function that runs on load and creates a table of the 5-day forecast. A table proved to be
a little too restrictive, so I will instead have it create descending paragraphs of the same dimensions.

New forecastDiv in useForecast generating, but only filling in the last flex div with data (from weatherData[1].list[36]).
For loop runs correctly, but it appends empty divs up up until the final loop. 
##Error fixed; I needed to call a new instance
of each element during each iteration.

Next step is to learn how to properly apply ReactDOM.render() to display the forecast data in the foredisplay div of
index.html.


##JUNE 14th (Dates to be included from here on out)
Checked some recommended tasks related to weatherapps, and one which I have not implemented is to have a selector that
allows the user to check the weather for a specific day of the week. The free tier of openweather.org only goes four 
days ahead, so I will have to take that into consideration. It doesn't supply me with an exact daily forecast, so
I'll design a function that takes the first reading after noon on a particular day and returns that.

First thing today though, after setting the basis for the above feature will be to figure out how to best get
the useForecast hook to render in HTML.

Did a simple tutorial at https://reactjs.org/tutorial/tutorial.html to see what fundamental mistakes I
was making.
- return statement frequently needs to be opened into multiple lines w/ parentheses, or Javascript wants to add a
    semi-colon and break it.
- using React.createElement in useForecast should be a better approach to my previous attempts.

Five-day forecast renders dynamically, but with parsing errors. Progress!
Parsing errors fixed. 
Before trying my idea from this morning, I'm going to work on the design.
- make date/time section more concise
- use weather icons in place of condition descriptor
- align columns uniformly

##JUNE 15th
After looking at the widgets offered in openweathermap's free tier, I've decided to add on to incorporate one into the
app. I've installed React router, and am going to have it display a different page based on what type of forecast
the user would like to see.

Followed through React router tutorial at https://www.codingame.com/playgrounds/6517/react-router-tutoria, except using
functional components.

After setting up my router and connecting my components, I ran into the error that I was trying to return a function as
a component. Changing " element={COMPONENT NAME} " to " element={<COMPONENT NAME/>} " turned out to be all that was
required for App.js to recognize it as a component.

Received work computer today. Set it up and downloaded all necessary programs before pulling this code.
##bug
npm install and npm audit return 6 high severity vulnerabilities all linked to react-scripts. Proof of
    this being that moving react-scripts to "devDependencies" and running 'npm audit --production' returns
    0 vulnerabilities.
- uninstalling/installing react-scripts doesn't solve the problem.
- npm audit fix --force would create a breaking change (by installing a much older version of react-scripts)
- The issue is the same as documented here: https://github.com/facebook/create-react-app/issues/11174
    It appears that this isn't actually an issue that needs fixing, but is a byproduct of 'npm audit'
    interacting with create-react-app.

##JUNE 16th
